{"version":3,"sources":["utils/usePersistedState.ts","styles/themes/light.ts","styles/themes/dark.ts","styles/global.ts","components/Header/styles.tsx","components/Header/index.tsx","App.tsx","index.tsx"],"names":["usePersistedState","key","initialState","useState","storageValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","light","title","colors","primary","secundary","background","text","dark","createGlobalStyle","props","theme","Container","styled","div","Header","toggleTheme","useContext","ThemeContext","onChange","checked","checkedIcon","uncheckedIcon","height","width","handleDiameter","offColor","shade","onColor","App","setTheme","className","ReactDOM","render","document","getElementById"],"mappings":"gLAyBeA,I,IAAAA,EAlBf,SAA8BC,EAAaC,GACzC,MAA0BC,oBAAS,WACjC,IAAMC,EAAeC,aAAaC,QAAQL,GAE1C,OAAIG,EACKG,KAAKC,MAAMJ,GAEXF,KANX,mBAAOO,EAAP,KAAcC,EAAd,KAcA,OAJAC,qBAAU,WACRN,aAAaO,QAAQX,EAAKM,KAAKM,UAAUJ,MACxC,CAACR,EAAKQ,IAEF,CAACA,EAAOC,ICVFI,EAZD,CACZC,MAAO,QAEPC,OAAQ,CACNC,QAAS,UACTC,UAAW,UAEXC,WAAY,UACZC,KAAM,SCIKC,EAZF,CACXN,MAAO,OAEPC,OAAQ,CACNC,QAAS,UACTC,UAAW,UAEXC,WAAY,OACZC,KAAM,S,OCNKE,cAAf,8OAOkB,SAAAC,GAAK,OAAIA,EAAMC,MAAMR,OAAOG,cAEjC,SAAAI,GAAK,OAAIA,EAAMC,MAAMR,OAAOI,Q,yBCT5BK,EAAYC,IAAOC,IAAV,kLAEN,SAAAJ,GAAK,OAAIA,EAAMC,MAAMR,OAAOC,WC6B7BW,EAtBiB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjC,EAA0BC,qBAAWC,KAA7Bf,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MAEhB,OACE,kBAACU,EAAD,sBAGE,kBAAC,IAAD,CACEO,SAAUH,EACVI,QAAmB,SAAVlB,EACTmB,aAAa,EACbC,eAAe,EACfC,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,SAAUC,YAAM,GAAKxB,EAAOC,SAC5BwB,QAASzB,EAAOE,cCATwB,EAjBH,WACV,MAA0B1C,EAAgC,QAASc,GAAnE,mBAAOU,EAAP,KAAcmB,EAAd,KAMA,OACE,kBAAC,IAAD,CAAenB,MAAOA,GACpB,yBAAKoB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQf,YARM,WAClBc,EAAyB,UAAhBnB,EAAMT,MAAoBM,EAAOP,SCV9C+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f1d6e2ec.chunk.js","sourcesContent":["import { useState, useEffect, Dispatch, SetStateAction } from 'react';\n\ntype Response<T> = [\n  T,\n  Dispatch<SetStateAction<T>>,\n];\n\nfunction usePersistedState<T>(key: string, initialState: T): Response<T> {\n  const [state, setState] = useState(() => {\n    const storageValue = localStorage.getItem(key);\n\n    if (storageValue) {\n      return JSON.parse(storageValue);\n    } else {\n      return initialState;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState]\n}\n\nexport default usePersistedState;","const light = {\n  title: 'light',\n\n  colors: {\n    primary: '#C62e65',\n    secundary: '#D63AF9',\n\n    background: '#f5f5f5',\n    text: '#333',\n  }\n};\n\nexport default light;","const dark = {\n  title: 'dark',\n\n  colors: {\n    primary: '#C62e65',\n    secundary: '#D63AF9',\n\n    background: '#222',\n    text: '#FFF',\n  }\n};\n\nexport default dark;","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  body {\n    background: ${props => props.theme.colors.background};\n    font-size: 18px;\n    color: ${props => props.theme.colors.text};\n    font-family: sans-serif;\n    font-style: antialiased;\n  }\n`;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  height: 60px;\n  background: ${props => props.theme.colors.primary};\n  color: #FFF;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 30px;\n`;","import React, { useContext } from 'react';\nimport Switch from 'react-switch';\nimport { ThemeContext } from 'styled-components';\nimport { shade } from 'polished';\n\nimport { Container } from './styles';\n\ninterface Props {\n  toggleTheme(): void;\n}\n\nconst Header: React.FC<Props> = ({ toggleTheme }) => {\n  const { colors, title } = useContext(ThemeContext);\n\n  return (\n    <Container>\n      Theme-Switcher\n\n      <Switch\n        onChange={toggleTheme}\n        checked={title === 'dark'}\n        checkedIcon={false}\n        uncheckedIcon={false}\n        height={10}\n        width={40}\n        handleDiameter={20}\n        offColor={shade(0.2, colors.primary)}\n        onColor={colors.secundary}\n      />\n    </Container>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport { ThemeProvider, DefaultTheme } from 'styled-components';\nimport usePersistedState from './utils/usePersistedState';\n\nimport light from './styles/themes/light';\nimport dark from './styles/themes/dark';\n\nimport GlobalStyle from './styles/global';\nimport Header from './components/Header';\n\nconst App = () => {\n  const [theme, setTheme] = usePersistedState<DefaultTheme>('theme', light);\n\n  const toggleTheme = () => {\n    setTheme(theme.title === 'light' ? dark : light);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <GlobalStyle />\n        <Header toggleTheme={toggleTheme} />\n      </div>\n    </ThemeProvider >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}